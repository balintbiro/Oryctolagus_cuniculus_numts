library(TeachingDemos)
my_variable<-c(1,2,1,3,1,4,1,3,1,2,3,2,3,4,1,2,32,4,5,2,5,6,3,1,3,31,1,2,3,3,21,2)
my_variable
return(z_score)
lapply(my_variable, calc_z_score(mean(my_variable),sd(my_variable)))
#define a function for calculating z scores for every data point in a given variable
calc_z_score <- function(input_mean, input_sd, input_value){
z_score<-(input_value-input_mean)/input_sd
return(z_score)
}
my_variable<-c(2,2,3,2,5,1,6)
#define a function for calculating z scores for every data point in a given variable
calc_z_score <- function(input_mean, input_sd, input_value){
z_score<-(input_value-input_mean)/input_sd
return(z_score)
}
lapply(my_variable, calc_z_score(mean(my_variable),sd(my_variable)))
#define a function for calculating z scores for every data point in a given variable
calc_z_score <- function(input_variable, input_element){
z_score<-(input_element-mean(input_variable))/sd(input_variable)
return(z_score)
}
lapply(my_variable, calc_z_score(my_variable))
lapply(my_variable, calc_z_score)
#define a function for calculating z scores for every data point in a given variable
calc_z_score <- function(input_variable){
z_score<-(input_element-mean(input_variable))/sd(input_variable)
return(z_score)
}
lapply(my_variable, calc_z_score)
z_score<-input_variable*2
#define a function for calculating z scores for every data point in a given variable
calc_z_score <- function(input_variable){
z_score<-input_variable*2
return(z_score)
}
sapply(my_variable,calc_z_score)
z_score<-(input_element-mean(input_variable))/sd(input_variable)
#define a function for calculating z scores for every data point in a given variable
calc_z_score <- function(input_element, input_variable){
z_score<-(input_element-mean(input_variable))/sd(input_variable)
return(z_score)
}
sapply(my_variable,calc_z_score)
sapply(my_variable,calc_z_score(my_variable))
z_score<-(input_element-mean(input_variable))/sd(input_variable)
#define a function for calculating z scores for every data point in a given variable
calc_z_score <- function(input_element, input_variable){
z_score<-(input_element-mean(input_variable))/sd(input_variable)
return(z_score)
}
sapply(my_variable,calc_z_score(my_variable))
#define a function for calculating z scores for every data point in a given variable
calc_z_score <- function(input_element){
z_score<-input_element*2
return(z_score)
}
sapply(my_variable,calc_z_score)
calc_z_score <- function(input_element,input_variable){
z_score<-(input_element-mean(input_variable))/sd(input_variable)
return(z_score)
}
sapply(my_variable,calc_z_score, input_variable=my_variable)
#apply the previously defined function to all element in a variable
z_scores<-sapply(my_variable,calc_z_score, input_variable=my_variable)
z_scores
#calculating the mean of the variable
my_sum<-0
sum(my_variable)
#define a simple variable
my_variable<-c(2,2,3,2,5,1,6)
#define a global variable for sum
my_sum<-0
sum(my_variable)
#function for calculating mean
calc_mean<-function(element, my_variable){
my_sum+=element
return(my_sum/length(my_variable))
}
#function for calculating mean
calc_mean<-function(element, my_variable){
my_sum+=element
return(my_sum/length(my_variable))
}
#function for calculating mean
calc_mean<-function(element, my_variable){
my_sum+=element
return(my_sum/length(my_variable))
}
#function for calculating mean
calc_mean<-function(element, my_variable){
my_sum+=element
return(my_sum/length(my_variable))
}
#function for calculating mean
calc_mean<-function(element, my_variable){
my_sum+=element
return(my_sum/length(my_variable))
}
#define a function for calculating z scores for every data point in a given variable
calc_z_score <- function(input_element,input_variable){
z_score<-(input_element-mean(input_variable))/sd(input_variable)
return(z_score)
}
#function for calculating mean
calc_mean<-function(element, my_variable){
my_sum+=element
my_mean<-my_sum/length(my_variable)
return(my_mean)
}
length(my_variable)
#define a simple variable
my_variable<-c(2,2,3,2,5,1,6)
mean(my_variable)
sd(my_variable)
#define global variable for sd calculation
my_sum<-0
my_sum
sd(my_variable)
#define a simple variable
my_variable<-c(2,2,3,2,5,1,6)
#define a function for calculating z scores for every data point in a given variable
calc_z_score <- function(input_element,input_variable){
z_score<-(input_element-mean(input_variable))/sd(input_variable)
return(z_score)
}
#apply the previously defined function to all element in a variable
z_scores<-sapply(my_variable,calc_z_score, input_variable=my_variable)
z_scores
my_sample<-sample(population,size=10,replace=FALSE)
#define a simple variable
population<-c(2,1,3,1,2,3,1,3,4,5,1,1,3,4,5,2,3,4,5,2,3,2,4,1,3,4,4,2,4,5,45,3,2,1,5)
#setting the seed
set.seed(1)
my_sample<-sample(population,size=10,replace=FALSE)
my_sample
#define a function for calculating z scores for every data point in a given variable
calc_z_score <- function(input_element,input_variable){
z_score<-(input_element-mean(input_variable))/sd(input_variable)
return(z_score)
}
#apply the previously defined function to all element in a variable
z_scores<-sapply(my_sample,calc_z_score, input_variable=my_sample)
z_scores
#define a simple variable
my_population<-c(2,1,3,1,2,3,1,3,4,5,1,1,3,4,5,2,3,4,5,2,3,2,4,1,3,4,4,2,4,5,45,3,2,1,5)
#setting the seed
set.seed(1)
my_sample<-sample(population,size=10,replace=FALSE)
#define a function for calculating z scores for every data point in a given variable
calc_z_score <- function(input_element,sample,population){
z_score<-(input_element-mean(population))/(sd(population)/length(sample))
return(z_score)
}
#apply the previously defined function to all element in a variable
z_scores<-sapply(my_sample,calc_z_score, population=my_population)
#apply the previously defined function to all element in a variable
z_scores<-sapply(my_sample,calc_z_score, sample=my_sample,population=my_population)
z_scores
length(my_sample)
my_sample
#define a function for calculating t scores for every data point in a given variable
calc_t_score <- function(input_element,sample,population){
t_score<-(input_element-mean(population))/(sd(sample)/length(sample))
return(t_score)
}
#apply the previously defined function to all element in a variable
t_scores<-sapply(my_sample,calc_t_score, sample=my_sample,population=my_population)
t_scores
#create variable
my_variable<-c(123,120,120,121,124,231,210,215,542,21,121,213,102,654,332,432,546,767,877,657,879,321,123,435,654,657,433,767,456)
#set seed for consistency/reproducibility
set.seed(1)
#number of required samplesize for bootstraping (=length of my_sample)
samplesize<-length(my_variable)
#number of repetition for bootstraping
repetitions<-10000
#sample the variable for the required times with replacement and load the results into a matrix
bootstrap_samples<-matrix(sample(my_variable, size=samplesize*repetitions, replace = TRUE),
ncol=repetitions, nrow=samplesize)
dim(bootstrap_samples)#check the dimsensions of our matrix
#calculate the mean for every bootstrap samples (it will give 10000 means)
bootstrap_means<-colMeans(bootstrap_samples)
#visualize means distribution
boxplot(bootstrap_means)
#building a bootstrap confidence interval with the percentile method
lower_ci_limit<-quantile(bootstrap_means, prob=0.025)
higher_ci_limit<-quantile(bootstrap_means, prob=0.975)
lower_ci_limit, higher_ci_limit
lower_ci_limit
higher_ci_limit
ci(my_variable)
library(gmodels)
ci(my_variable)
proba<-2^2
proba
norm_dist<-function(element,mean,sd){
y_value<-(1/(sqrt(2*3.14*sd)))*e^((-(element-mean)^2)/2*sd^2)
return(y_value)
}
my_variable<-c(1,2,3,4,1,2,3,1,3,3,4,2,4,2,4,4,2,2,1,3,3,2,1,2,3,4,2,2,1,3,4,2,1)
lapply(my_variable,norm_dist,mean=mean(my_variable),sd=sd(my_variable))
norm_dist<-function(element,mean,sd){
y_value<-(1/(sqrt(2*3.14*sd)))*exp(1)^((-(element-mean)^2)/2*sd^2)
return(y_value)
}
my_variable<-c(1,2,3,4,1,2,3,1,3,3,4,2,4,2,4,4,2,2,1,3,3,2,1,2,3,4,2,2,1,3,4,2,1)
lapply(my_variable,norm_dist,mean=mean(my_variable),sd=sd(my_variable))
distribution<-lapply(my_variable,norm_dist,mean=mean(my_variable),sd=sd(my_variable))
distribution
distributions
distribution
boxplot(distribution)
hist(distribution)
typeof(distribution)
distribution<-c(distribution)
hist(distribution)
distribution
distribution[0]
distribution[1:4]
distribution[1]
my_variable<-c(1,2,3,4,1,2,3,1,3,)
my_variable<-c(1,2,3,4,1,2,3,1,3)
distribution<-lapply(my_variable,norm_dist,mean=mean(my_variable),sd=sd(my_variable))
distribution<-c(distribution)
hist(distribution)
hist(distribution)
norm_dist<-function(element,mean,sd){
y_value<-(1/(sqrt(2*3.14*sd)))*exp(1)^((-(element-mean)^2)/2*sd^2)
return(y_value)
}
my_variable<-c(1:2000)
distribution<-lapply(my_variable,norm_dist,mean=mean(my_variable),sd=sd(my_variable))
hist(distribution)
distribution
my_variable
my_variable<-c(1:2000,50)
my_variable
my_variable<-c([1:2000],50)
my_variable<-[1:2000],50
my_variable<-[1:2000]
c(
my_variable<-c([1:2000],50)
my_variable<-seq(from=1,to=50,by=2000/50)
my_variable
2000/50
50/2000
my_variable<-seq(from=1,to=50,by=50/2000)
my_variable
distribution<-lapply(my_variable,norm_dist,mean=mean(my_variable),sd=sd(my_variable))
distribution
my_variable<-seq(1,50,length.out=2000)
my_variable
distribution
typeof(distribution)
distribution[1:4]
my_variable[1:4]
norm_dist<-function(element,mean,sd){
y_value<-1/sqrt(2*3.14*sd)*exp(1)^((-(element-mean)^2)/2*sd^2)
return(y_value)
}
my_variable<-seq(1,50,length.out=2000)
distribution<-lapply(my_variable,norm_dist,mean=mean(my_variable),sd=sd(my_variable))
distribution
exp(1)
norm_dist<-function(element,mean,sd){
y_value<-1/sqrt(2*pi*sd)*exp(1)^((-(element-mean)^2)/2*sd^2)
return(y_value)
}
my_variable<-seq(1,50,length.out=2000)
distribution<-lapply(my_variable,norm_dist,mean=mean(my_variable),sd=sd(my_variable))
distribution
my_variable<-seq(50,100,length.out=2000)
distribution<-lapply(my_variable,norm_dist,mean=mean(my_variable),sd=sd(my_variable))
distribution
pi
prob_dens<-(pi*sd)*exp(-0.5*((element-mean)/sd)**2)
return(y_value)
norm_dist<-function(element,mean,sd){
prob_dens<-(pi*sd)*exp(-0.5*((element-mean)/sd)**2)
return(y_value)
}
my_variable<-seq(50,100,length.out=2000)
distribution<-lapply(my_variable,norm_dist,mean=mean(my_variable),sd=sd(my_variable))
norm_dist<-function(element,mean,sd){
y_value<-(pi*sd)*exp(-0.5*((element-mean)/sd)**2)
return(y_value)
}
my_variable<-seq(50,100,length.out=2000)
distribution<-lapply(my_variable,norm_dist,mean=mean(my_variable),sd=sd(my_variable))
dsignrank()
distribution
my_variable<-seq(1,50,length.out=2000)
distribution<-lapply(my_variable,norm_dist,mean=mean(my_variable),sd=sd(my_variable))
distribution
distribution[1:4]
my_variable<-c(seq(1,50,length.out=2000))
distribution<-lapply(my_variable,norm_dist,mean=mean(my_variable),sd=sd(my_variable))
distribution[1:4]
z.test(my_population,99,5)
library(TeachingDemos)
#one sample version
#in this case we compare population mean (u) to a hypothetical value (u0)
#H0 is that u=u0
#H1 two sided u!=u0
#H1 ones sided u>u0; u<u0
my_population<-c(1,3,1,3,4,1,1,2,4,1,2,3,4,1,2,4,2,4,2,1,3,4,4,1,3,4)
z.test(my_population,99,5)
z.test(my_population,mu=99,stdev=5)
z.test(my_population,mu=2.5,stdev=5)#mu and stdev are hypothetical values
z.test(my_population,mu=16,stdev=5)#mu and stdev are hypothetical values
z.test(my_population,mu=16,stdev=5,conf.level=0.95)#mu and stdev are hypothetical values
z.test(my_population,mu=16,stdev=5,conf.level=95)#mu and stdev are hypothetical values
z.test(my_population,mu=16,stdev=5,conf.level=0.95)#mu and stdev are hypothetical values
z_score_calc<-function(variable,mu,sigma){
z_score<-(mean(variable)-mu)/(sigma/sqrt(length(variable)))
}
z_score_calc(my_population,mu=16,sigma=5)
proba<-z_score_calc(my_population,mu=16,sigma=5)
proba
z.test(my_population,mu=16,stdev=5,conf.level=0.95)#mu and stdev are hypothetical values
z_score<-z_score_calc(my_population,mu=16,sigma=5)
z_score
return(z_score)
#two sample version
#condition(s) of usage:
#-normally distributed variables with known standard deviations-->population SD so sigma
#defining own function for two sample z stat calculation
z_score_calc<-function(sample1,sample2,population1,population2){
x1<-mean(sample1)
x2<-mean(sample2)
sigma1<-sd(population1)
sigma2<-sd(population2)
n1<-length(sample1)
n2<-length(sample2)
z_score<-(x1-x2)/sqrt((sigma1/n1)+(sigma2/n2))
return(z_score)
}
population2<-c(1,2,3,4,2,1,3,4,2,2,4,5,3,4,2,2,3,4,5,3,2,1,2,3,4,5,3,2,3,4,2,3,4,3)
length(population2)
length(population1)
population1<-c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1)
length(population1)
population2<-c(1,2,3,4,2,1,3,4,2,2,4,5,3,4,2,2,3,4,5,3,2,1,2,3,4,5,3,2,3,4,2)
length(population2)
population2<-c(1,2,3,4,2,1,3,4,2,2,4,5,3,4,2,2,3,4,5,3,2,1,2,3,4,5,3,2,3)
length(population2)
length(population1)
sample1<-sample(population1,size=15,replace=FALSE)
sample2<-sample(population2,size=15,replace=FALSE)
sample1
sample2
z_score<-z_score_calc(sample1=sample1,
sample2=sample2,
population1=population1,
population2=population2)
z_score
z_score
#do the two sampeld z test with built in function
z_score<-z.test(x=population1,
y=population2,
sigma.x=sd(population1),
sigma.y=sd(population2))
#do the two sampeld z test with built in function
z_score<-z.test(x=population1,
sigma.x=sd(population1),
y=population2,
sigma.y=sd(population2))
#do the two sampeld z test with built in function
z_score<-z.test(x=population1,
sigma.x=sd(population1),
y=population2,
sigma.y=sd(population2),
conf.level=0.95)
x <- c(7.8, 6.6, 6.5, 7.4, 7.3, 7., 6.4, 7.1, 6.7, 7.6, 6.8)
y <- c(4.5, 5.4, 6.1, 6.1, 5.4, 5., 4.1, 5.5)
z.test(x, sigma.x=0.5, y, sigma.y=0.5, conf.level=0.90)
x <- c(7.8, 6.6, 6.5, 7.4, 7.3, 7., 6.4, 7.1, 6.7, 7.6, 6.8)
y <- c(4.5, 5.4, 6.1, 6.1, 5.4, 5., 4.1, 5.5)
z.test(x, sigma.x=0.5, y, sigma.y=0.5, conf.level=0.90)
#do the two sampeld z test with built in function
z_score<-z.test(x=population1,
sigma.x=sd(population1),
y=population2,
sigma.y=sd(population2),
mu=3,
conf.level=0.95)
#do the two sampeld z test with built in function
z_score<-z.test(x=population1,
sigma.x=sd(population1),
y=population2,
sigma.y=sd(population2),
conf.level=0.95)
#installing the RIdeogram package (just for the first time)
#install.packages("RIdeogram")
#load the required module
require(RIdeogram)
#get the karyotype header
karyotype_header<-read.table('../results/chromosome_synteny_dual_karyotype.csv',
nrows=1,
header=FALSE,
sep=',')
#get the karyotype header
karyotype_header<-read.table('../results/chromosome_synteny_dual_karyotype.csv',
nrows=1,
header=FALSE,
sep=',')
#get the karyotype header
karyotype_header<-read.table('../results/chromosome_synteny_dual_karyotype.csv',
nrows=1,
header=FALSE,
sep=',')
pwd
getwd()
cwd('C:/Users/pytho/numt/codes/')
setwd("C:/Users/pytho/numt/codes/")
#get the karyotype header
karyotype_header<-read.table('../results/chromosome_synteny_dual_karyotype.csv',
nrows=1,
header=FALSE,
sep=',')
#get the karyotype dataframe
karyotype_dual_comparison<-read.table('../results/chromosome_synteny_dual_karyotype.csv',
header=FALSE,
sep=',',
skip=1)
#add header to the dataframe
colnames(karyotype_dual_comparison)<-karyotype_header
#get the synteny header
synteny_header<-read.table('../results/chromosome_synteny_dual_synteny.csv',
nrows=1,
header=FALSE,
sep=',')
#get the synteny dataframe
synteny_dual_comparison<-read.table('../results/chromosome_synteny_dual_synteny.csv',
header=FALSE,
sep=',',
skip=1)
#add header to synteny dataframe
colnames(synteny_dual_comparison)<-synteny_header
ideogram(karyotype = karyotype_dual_comparison,
synteny = synteny_dual_comparison)
#set the working directory
setwd('../results/')
convertSVG("chromosome.svg", device = "png", dpi=1200)#the svg filename cannot be modified, so it has to be changed after the creation,
ideogram(karyotype = karyotype_dual_comparison,
synteny = synteny_dual_comparison)
#set the working directory
setwd('../results/')
convertSVG("chromosome.svg", device = "png", dpi=1200)#the svg filename cannot be modified, so it has to be changed after the creation,
#installing the RIdeogram package (just for the first time)
#install.packages("RIdeogram")
#load the required module
require(RIdeogram)
#get the karyotype header
karyotype_header<-read.table('../results/scaffold_synteny_dual_karyotype.csv',
nrows=1,
header=FALSE,
sep=',')
#get the karyotype dataframe
karyotype_dual_comparison<-read.table('../results/scaffold_synteny_dual_karyotype.csv',
header=FALSE,
sep=',',
skip=1)
#add header to the dataframe
colnames(karyotype_dual_comparison)<-karyotype_header
#get the synteny header
synteny_header<-read.table('../results/scaffold_synteny_dual_synteny.csv',
nrows=1,
header=FALSE,
sep=',')
#get the synteny dataframe
synteny_dual_comparison<-read.table('../results/scaffold_synteny_dual_synteny.csv',
header=FALSE,
sep=',',
skip=1)
#add header to synteny dataframe
colnames(synteny_dual_comparison)<-synteny_header
ideogram(karyotype = karyotype_dual_comparison,
synteny = synteny_dual_comparison)
#set the working directory
setwd('../results/')
convertSVG("chromosome.svg", device = "png", dpi=1200)#the svg filename cannot be modified, so it has to be changed after the creation,
#get the karyotype header
karyotype_header<-read.table('../results/gene_synteny_dual_karyotype.csv',
nrows=1,
header=FALSE,
sep=',')
#get the karyotype dataframe
karyotype_dual_comparison<-read.table('../results/gene_synteny_dual_karyotype.csv',
header=FALSE,
sep=',',
skip=1)
#add header to the dataframe
colnames(karyotype_dual_comparison)<-karyotype_header
#get the synteny header
synteny_header<-read.table('../results/gene_synteny_dual_synteny.csv',
nrows=1,
header=FALSE,
sep=',')
#get the synteny dataframe
synteny_dual_comparison<-read.table('../results/gene_synteny_dual_synteny.csv',
header=FALSE,
sep=',',
skip=1)
#add header to synteny dataframe
colnames(synteny_dual_comparison)<-synteny_header
ideogram(karyotype = karyotype_dual_comparison,
synteny = synteny_dual_comparison)
#set the working directory
setwd('../results/')
convertSVG("chromosome.svg", device = "png", dpi=1200)#the svg filename cannot be modified, so it has to be changed after the creation,
